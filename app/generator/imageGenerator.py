import dspy
import os
import requests
import fal_client
from app.core.config import settings
import tempfile
import subprocess
import platform

class PredictImageAccuracy(dspy.Signature):
    desired_prompt: str = dspy.InputField(desc="The desired prompt for the image.")
    current_image: dspy.Image = dspy.InputField(desc="The current image generated for the prompt")
    current_prompt: str = dspy.InputField(desc="The current prompt used to generate the image.")

    feedback: str = dspy.OutputField(desc="Feedback on the image, including whether it matches the desired prompt.")
    image_strictly_matches_desired_prompt: bool = dspy.OutputField(formt= bool, desc="Whether the image strictly matches the desired prompt")
    revised_prompt: str = dspy.OutputField(desc="The revised prompt based on the feedback.")

class ImageGenerator:
    """
    Using DSPy you refine the initial prompt and create a new refined prompt based on the output generated by the Image Model.
    The refined prompt is then used to generate a new image using the Image Model.
    """
    def __init__(self, prompt: str, max_iterations=3):
        self.dspy = self._build_dspy_model()
        self.max_iterations = max_iterations
        self.user_prompt = prompt
        self.final_prompt = prompt

    def _build_dspy_model(self):
        """
        Build a DSPy model for image generation.
        This model uses the Gemini model to provide feedback on the generated image.
        It also uses the Image Model to generate images based on the user's prompt.
        """
        response = dspy.ChainOfThought(PredictImageAccuracy, n=5)

        return response

    def _generate_image(self, prompt):
        """
        Generate an image using the Image Model.
        Args:
            prompt (str): The prompt to generate the image.
        Returns:
            dspy.Image: The generated image.
        """
        if os.environ.get('FAL_KEY') is None:
            os.environ['FAL_KEY'] = settings.fal_api_key

        request_id = fal_client.submit(
        "fal-ai/flux-pro/v1.1-ultra",
        arguments={
            "prompt": prompt
        },
        ).request_id

        result = fal_client.result("fal-ai/flux-pro/v1.1-ultra", request_id)
        url = str(result["images"][0]["url"])

        return dspy.Image.from_url(url), url
    
    def _display_image(self, url: str):
        """
        Display the generated image.
        Args:
            image (dspy.Image): The generated image.
        """
        response = requests.get(url)

        try:
            with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmpfile:
                tmpfile.write(response.content)
                tmpfile_path = tmpfile.name
            
            if platform.system() == "Darwin":  # macOS
                subprocess.run(["open", tmpfile_path], check=True)
            elif platform.system() == "Linux":
                subprocess.run(["xdg-open", tmpfile_path], check=True)
            elif platform.system() == "Windows":
                subprocess.run(["start", tmpfile_path], shell=True, check=True)
            else:
                print(f"Image saved to {tmpfile_path}. Please open it manually.")

        except Exception as e:
            print(f"Error displaying image: {e}")

    def generate(self):
        """
        Generate an image based on the user's prompt and refine it using DSPy.
        Args:
            prompt (str): The user's prompt.
        """
        for i in range(self.max_iterations):
            print(f"Iteration {i+1} of {self.max_iterations}")

            current_image, image_url = self._generate_image(self.final_prompt)
            result = self.dspy(
                desired_prompt=self.user_prompt,
                current_image=current_image,
                current_prompt=self.final_prompt
            )
            self._display_image(image_url)

            if result.image_strictly_matches_desired_prompt:
                print(f"Response, {result}")

                print("Image strictly matches the desired prompt.")
                break

            print(f"Response, {result}")

            self.final_prompt = result.revised_prompt

            print(f"Reasoning: {result.reasoning}")
            print(f"Revised prompt: {self.final_prompt}")
            print(f"Feedback: {result.feedback}")

        print("Final prompt:", self.final_prompt)
